# Production docker-compose configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: xnfl_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-XNFL-Fantasy}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./SQL_scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - xnfl_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-XNFL-Fantasy}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  api:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: xnfl_api_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-XNFL-Fantasy}
      - PYTHONPATH=/app
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - xnfl_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  xnfl_network:
    driver: bridge

volumes:
  postgres_data: